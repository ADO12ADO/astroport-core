use std::marker::PhantomData;

use cosmwasm_schema::serde::de::DeserializeOwned;
use cosmwasm_std::testing::{MockApi, MockQuerier, MockStorage};
use cosmwasm_std::{
    from_json, to_json_binary, Coin, CustomQuery, Empty, OwnedDeps, Querier,
    QuerierResult, QueryRequest, SystemError, SystemResult, WasmQuery,
};

use astroport::factory;

pub fn mock_custom_dependencies() -> OwnedDeps<MockStorage, MockApi, CustomQuerier, Empty> {
    OwnedDeps {
        storage: MockStorage::default(),
        api: MockApi::default(),
        querier: CustomQuerier::new(&[]),
        custom_query_type: PhantomData,
    }
}

pub struct CustomQuerier<C: DeserializeOwned = Empty> {
    pub inner: MockQuerier<C>,
}

impl<C: DeserializeOwned> CustomQuerier<C> {
    pub fn new(balances: &[(&str, &[Coin])]) -> Self {
        Self {
            inner: MockQuerier::new(balances),
        }
    }
}

impl<C: CustomQuery + DeserializeOwned> Querier for CustomQuerier<C> {
    fn raw_query(&self, bin_request: &[u8]) -> QuerierResult {
        match from_json::<QueryRequest<C>>(bin_request) {
            Ok(ref v) => match v {
                QueryRequest::Wasm(WasmQuery::Smart { contract_addr, msg })
                    if contract_addr == "factory" =>
                {
                    match from_json(msg).unwrap() {
                        factory::QueryMsg::BlacklistedPairTypes {} => {
                            SystemResult::Ok(to_json_binary(&Vec::<()>::new()).into())
                        }
                        _ => unimplemented!("Unsupported factory query type"),
                    }
                }
                _ => self.inner.handle_query(v),
            },
            Err(e) => SystemResult::Err(SystemError::InvalidRequest {
                error: format!("Parsing query request: {e}"),
                request: bin_request.into(),
            }),
        }
    }
}
